{"name":"Cbuilder","tagline":"html内容生产插件","body":"#cbuilder\r\n####快速简单的构建你的html\r\n\r\n#目录\r\n* 项目结构\r\n* 安装插件\r\n* 使用\r\n* API\r\n* 开发独立组件\r\n\r\n#项目结构\r\n![项目结构图](https://raw.githubusercontent.com/chenchangwen/cbuilder/master/screenshots/structure.jpg)\r\n\r\n**蓝色箭头为目录生成方向**\r\n#安装插件\r\n初始化npm\r\n```\r\nnpm install\r\n```\r\n初始化bower\r\n```\r\nbower install \r\n```\r\n安装完,可以直接运行cbuilder.html查看示例.\r\n\r\n#使用\r\n\r\n###编辑html\r\n```html\r\n<script src=\"src/js/jquery.cbuilder.js\"></script>\r\n<link href=\"src/css/cbuilder.css\" rel=\"stylesheet\"/>\r\n<body>\r\n    <div id=\"test1\"></div>\r\n    <div id=\"test2\"></div>\r\n</body>\r\n```\r\n```javascript\r\n<script type=\"text/javascript\">\r\n    $(document).ready(function () {\r\n        var options = {\r\n            height: '800px'\r\n        };\r\n        $('#test1,#test2').cbuilder(options);\r\n    });\r\n</script>\r\n```\r\njquery.cbuilder.js会构建你的html\r\n\r\n\r\n###展示html\r\n```html\r\n<script src=\"/cbuilder/dist/cbuilder_parser.min.js\"></script>\r\n<script src=\"/cbuilder/dist/cbuilder_parser.min.css\"></script>\r\n```\r\ncbuilder_parse.min.js会解析你的html\r\n\r\n\r\n\r\n\r\n#API\r\n##$(selector).cbuilder(options)\r\n初始化cbuilder\r\n###selector\r\n用于筛选的选择器\r\n###options\r\n* optoins.height *String*  高度,默认\"100%\"\r\n* optoins.width *String* 高度,默认\"100%\"\r\n* optoins.toolbar *Array* 工具条,默认[ \"clean\", \"anchor\", \"preview\", \"picture\"],每个数组索引对应每个独立功能(工具条项目)的文件夹名\r\n\r\n### $.cbuilder\r\n```javascript\r\n $.cbuilder = {\r\n        /* 路径 */\r\n        path: {\r\n            /* 当前根目录路径 */\r\n            root: rootPath,\r\n            /* 当前js目录路径 */\r\n            js: jsPath\r\n        },\r\n        /**\r\n         * 添加内容\r\n         * @html {String} \r\n         * @clstype {String} tab|item  tab:容器元素,item:一般元素\r\n         */\r\n        append: function (html,clstype) {\r\n        },\r\n        /* 获取内容 */\r\n        getContent: function () {\r\n        },\r\n        /**\r\n         * 设置内容\r\n         * @html {String}\r\n         */\r\n        setContent: function (html) {\r\n        },\r\n        /* 当前激活的cbuilder */\r\n        active,\r\n        /* 工具项 */\r\n        $itemtools:{\r\n            /* 显示工具项 */\r\n            show:function(){\r\n            },\r\n            /* 隐藏工具项 */\r\n            hide:function(){\r\n            }\r\n        },\r\n        /* 属性窗口 */\r\n        propertiesWindow:{\r\n            /* 当前选择的对象 */\r\n            $selectedobj,\r\n            /**\r\n             * 显示属性窗口\r\n             * @obj {Object}\r\n             * obj.name          名称\r\n             * obj.pillstitle    标题\r\n             */\r\n            show:function(obj){\r\n            }\r\n        }\r\n    }\r\n```\r\n\r\n### 事件\r\n| 事件        |说明 |\r\n| --------   | -----:  |\r\n| cbuilder:onWrapContent     | 当cbuilder要包住新建的内容时   |\r\n| cbuilder:onContentReady        |  当cbuilder内容已经准备好时   |\r\n| cbuilder:onGetContentBefore        |    当cbuilder获取内容之前   |\r\n| propertiesWindow:Showing  |     属性窗口显示时执行   |\r\n\r\n\r\n#开发独立组件\r\n**一般情况是基于toolbar(工具条),即点击工具条任意一个按钮执行相关方法 以下主要以anchor/main.js 作为示例**\r\n###开发时,cbuilder根目录运行gulp命令.\r\n```\r\ngulp\r\n```\r\n###1. 创建你的组件\r\n路径:cbuilder/src/js/toolbar/**/main.js,它会被cbuilder初始化时执行(被引用时).\r\n```javascript\r\n/**\r\n * 初始化插件 所有main.js文件只有这个方法会被cbuilder调用\r\n * @element {Object} 当前cbuilder的元素,也可以说当前的容器\r\n * @basePath {String} 当前工具条路径\r\n * @commons {Object} 通用对象 详细请看/core/block/commons.js\r\n * @exports {Object} 返回当前工具条配置\r\n */\r\nfunction init(element, basePath,commons) {\r\n    /*导出对象*/\r\n    var exports = {\r\n        /*\r\n         *是否一个工具条 \r\n         *如果为true则其余属性不会被执行\r\n         *默认不填写该属性\r\n         *该属性主要为了处理加载文件做的事情并不是一个按钮的情况\r\n         */\r\n        isToolbar: false,\r\n        /*\r\n         *当此文件加载完毕\r\n         *只有当isToolbar: false 才有效\r\n         */\r\n        onLoaded:function(){\r\n        },\r\n        /*工具条*/\r\n        toolbar: {\r\n            /*名字 应该和文件夹名一致*/\r\n            name: \"preview\",\r\n            /*文本*/\r\n            text: '预览'\r\n            /*点击事件 */\r\n            onClick: function () {\r\n            }\r\n        },\r\n        /*\r\n         *类型 \r\n         *类型为iframe则执行layer弹窗,\r\n         *默认不填该属性\r\n         */\r\n        type: 'iframe'\r\n    }\r\n    return exports;\r\n}\r\n```\r\n\r\n###2. 修改你的propertiesWindow\r\n路径:cbuilder/src/tplhtml/propertiesWindow.html    \r\nhtml遵循bootstrap规范,pw为propertiesWindow的缩写,根div的id为以后调用所写的,**id必填**.    \r\n基本结构如下\r\n\r\n```html\r\n<div class=\"pw-anchor pw-panel\" id=\"pwanchor\">\r\n    <div class=\"pw-body\">\r\n        <div class=\"pw-body-content\">\r\n            <form class=\"form-horizontal\">\r\n                <div class=\"form-group\">\r\n                    <label for=\"cb-anchor-name\" class=\"col-sm-2 control-label\">名称:</label>\r\n                    <div class=\"col-sm-10\">\r\n                        <input type=\"text\" class=\"form-control input-sm\" id=\"cb-anchor-name\" placeholder=\"名称:\">\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n        <hr class=\"cb-article-divider\">\r\n        <div class=\"pw-body-footer\">\r\n            <button type=\"button\" id=\"cb-anchor-save\" class=\"btn btn-primary btn-sm save\">保 存</button>\r\n            <button type=\"button\" id=\"cb-anchor-delete\" class=\"btn btn-danger btn-sm delete deleteevent\">删 除</button>\r\n        </div>\r\n    </div>\r\n</div>\r\n```\r\n\r\n###3. 定义propertiesWindow事件\r\n路径:cbuilder/src/js/toolbar/anchor/main.js\r\n```\r\n$element.on('cbuilder:onContentReady', function (e) {\r\n    /* 双击时显示属性窗口 */\r\n    $('.cb-content').on('dblclick', function () {\r\n        var $this = $(this);\r\n        var $anchor = $this.find('.cb-anchor');\r\n        if ($anchor.length === 1) {\r\n            $.cbuilder.propertiesWindow.$selectedobj = $anchor;\r\n            $.cbuilder.propertiesWindow.show({\r\n                /* 这个pwanchor 就是刚第二步创建html所定义的 */\r\n                name: 'pwanchor',\r\n                pillstitle: '编辑锚点'\r\n            });\r\n        }\r\n        return false;\r\n    });\r\n});\r\n```\r\n\r\n```javascript\r\n_showingEvent: function () {\r\n    /* 显示属性窗口时要做的事情 */\r\n    view.$pw.on(\"propertiesWindow:Showing\", function (event) {\r\n        var id = $.cbuilder.propertiesWindow.$selectedobj.attr('id');\r\n        view.$name.val(id || '');\r\n    });\r\n},\r\n```\r\n \r\n###4. 引用你的组件    \r\n路径:cbuilder/src/js/core/plugin.js     \r\n**plugin.js是插件的基础核心文件,只有一个,最终合并为jquery.cbuilder.js**\r\n```javascript\r\nvar defaults = {\r\n        height: \"100%\",\r\n        width:\"99%\",\r\n        toolbar: ['anchor', 'preview', 'picture'], //引用处\r\n        tpl: {\r\n            toolbar: \"<div class='cb-toolbar'></div>\",\r\n            toolbar_button: \"<div class='btn-wrap'><button class='btn primary {clsname}'>{name}</button></div>\",\r\n            body: \"<div class='cb-body'></div>\",\r\n            body_item: \"<div class='cb-item'><div class='cb-content'></div></div>\",\r\n            body_item_tool: \"<div class='cb-tools'><div class='btn-wrap'></div></div>\"\r\n        }\r\n    };\r\n```\r\n\r\n\r\n###5. 撰写你的解析方法\r\n路径:cbuilder/src/js/parser/main.js    \r\n**parser/main.js是前端解析cbuilder的文件,只有一个,最终合并为/dist/cbuilder_parser.min.js**\r\n```\r\n...\r\n/* 我的组件 */\r\nmyComponent:function(){\r\n    //....\r\n},\r\n/* 解析组件 */\r\n_parseComponents: function () {\r\n    commons.objectCallFunction(view, 'myComponent');\r\n},\r\n...\r\n```\r\n在_parseComponents方法里,调用\"myComponent\"\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}